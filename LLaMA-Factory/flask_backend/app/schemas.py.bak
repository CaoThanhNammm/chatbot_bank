"""
Schema validation for API requests.
"""

from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass
from marshmallow import Schema, fields, validate, ValidationError, validates, validates_schema

class FinetuningSchema(Schema):
    """Schema for fine-tuning requests."""
    model_name_or_path = fields.String(required=True)
    dataset = fields.Raw(required=True)  # Thay đổi từ String sang Raw để chấp nhận file CSV
    template = fields.String(required=True)
    output_dir = fields.String(required=True)
    finetuning_type = fields.String(missing="lora")
    lora_target = fields.String(missing="all")
    per_device_train_batch_size = fields.Integer(missing=2)
    gradient_accumulation_steps = fields.Integer(missing=4)
    lr_scheduler_type = fields.String(missing="cosine")
    logging_steps = fields.Integer(missing=5)
    warmup_ratio = fields.Float(missing=0.1)
    save_steps = fields.Integer(missing=1000)
    learning_rate = fields.Float(missing=5e-5)
    num_train_epochs = fields.Float(missing=3.0)
    max_samples = fields.Integer(missing=500)
    max_grad_norm = fields.Float(missing=1.0)
    loraplus_lr_ratio = fields.Float(missing=16.0)
    fp16 = fields.Boolean(missing=True)
    report_to = fields.String(missing="none")

class ModelLoadSchema(Schema):
    """Schema for model loading requests."""
    task_id = fields.String(required=True)

class ModelUnloadSchema(Schema):
    """Schema for model unloading requests."""
    model_id = fields.String(required=True)

class ModelUpdateActiveSchema(Schema):
    """Schema for model activation/deactivation requests."""
    model_id = fields.String(required=True)
    is_active = fields.Boolean(required=True)

class ChooseModelSchema(Schema):
    """Schema for choosing a model by ID."""
    model_id = fields.String(required=True)

# Keep these for backward compatibility
class ModelActivateSchema(Schema):
    """Schema for model activation requests (legacy)."""
    model_name_or_path = fields.String(required=True)
    adapter_name_or_path = fields.String(required=True)
    template = fields.String(required=True)

class ModelDeactivateSchema(Schema):
    """Schema for model deactivation requests (legacy)."""
    model_name_or_path = fields.String(required=True)

class MessageSchema(Schema):
    """Schema for chat message."""
    role = fields.String(required=True, validate=validate.OneOf(["user", "assistant", "system"]))
    content = fields.String(required=True)

class ChatSchema(Schema):
    """Schema for chat requests."""
    messages = fields.List(fields.Nested(MessageSchema), required=True)
    system = fields.String(missing=None)
    
class StreamChatSchema(Schema):
    """Schema for streaming chat requests."""
    message = fields.String(required=True)
    model_id = fields.String(required=True)

# Authentication schemas
class RegisterSchema(Schema):
    """Schema for user registration."""
    username = fields.String(required=True, validate=validate.Length(min=3, max=64))
    email = fields.Email(required=True)
    password = fields.String(required=True, validate=validate.Length(min=8))
    confirm_password = fields.String(required=True)
    
    @validates_schema
    def validate_passwords(self, data, **kwargs):
        """Validate that passwords match."""
        if data.get('password') != data.get('confirm_password'):
            raise ValidationError('Passwords must match', 'confirm_password')

class LoginSchema(Schema):
    """Schema for user login."""
    username_or_email = fields.String(required=True)
    password = fields.String(required=True)

class ChangePasswordSchema(Schema):
    """Schema for changing password."""
    current_password = fields.String(required=True)
    new_password = fields.String(required=True, validate=validate.Length(min=8))
    confirm_password = fields.String(required=True)
    
    @validates_schema
    def validate_passwords(self, data, **kwargs):
        """Validate that passwords match."""
        if data.get('new_password') != data.get('confirm_password'):
            raise ValidationError('Passwords must match', 'confirm_password')

class ForgotPasswordSchema(Schema):
    """Schema for forgot password request."""
    email = fields.Email(required=True)

class ResetPasswordSchema(Schema):
    """Schema for password reset."""
    token = fields.String(required=True)
    new_password = fields.String(required=True, validate=validate.Length(min=8))
    confirm_password = fields.String(required=True)
    
    @validates_schema
    def validate_passwords(self, data, **kwargs):
        """Validate that passwords match."""
        if data.get('new_password') != data.get('confirm_password'):
            raise ValidationError('Passwords must match', 'confirm_password')

class ConversationSchema(Schema):
    """Schema for conversation operations."""
    title = fields.String(missing="New Conversation")
    user_id = fields.String(missing=None)

def validate_request(data: Dict[str, Any], schema_class: Schema) -> Dict[str, Any]:
    """
    Validate request data against a schema.
    
    Args:
        data: Request data
        schema_class: Schema class to validate against
        
    Returns:
        Validated data
        
    Raises:
        ValidationError: If validation fails
    """
    schema = schema_class()
    return schema.load(data)